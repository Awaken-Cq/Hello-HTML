

@전체상품목록 - sort by cate_no ascending(<=> descending)

SELECT pc.cate_no, pc.cate_name, p.product_no, p.product_name, p.product_price, p.product_detail
--FROM product NATURAL JOIN product_category;
--FROM product JOIN product_category USING(product_cate)
FROM product p JOIN product_category pc on p.product_cate = pc.cate_no
ORDER BY cate_no, product_name;

list of products by D Category 

SELECT pc.cate_no, pc.cate_name, p.product_no, p.product_name, p.product_price, p.product_detail
--FROM product NATURAL JOIN product_category;
--FROM product JOIN product_category USING(product_cate)
FROM product p JOIN product_category pc on p.product_cate = pc.cate_no
where pc.cate_no = 'D'
ORDER BY cate_no, product_name;

Total price by D Category's products

SELECT sum(product_price)
--FROM product NATURAL JOIN prDoduct_category;
--FROM product JOIN product_category USING(product_cate)
FROM product p JOIN product_category pc on p.product_cate = pc.cate_no
where pc.cate_no = 'D'

Total price by each Category

SELECT sum(product_price)
--FROM product NATURAL JOIN prDoduct_category;
--FROM product JOIN product_category USING(product_cate)
FROM product p JOIN product_category pc on p.product_cate = pc.cate_no
GROUP BY cate_no;


------------------------
상품 목록
상품번호(PK)n.n 상품명n.n 			가격n.n chk(>=0)	 상세정보 분류n.n(FK)
001				아메리카노			2500				D
002			아이스아메리카노		2500				D
003				라떼				3000				D
004				치즈케익			4000				F



상품 분류
분류번호(PK)n.n 분류명n.n
D	음료
F	음식
G	상품

	
drop table product;
drop table product_category;

create table product_category(
	cate_no char(1),
	cate_name varchar2(30) Not null,
	constraint p_cate_cate_no_pk Primary key(cate_no)
	);

create table product(
	product_no varchar2(5),
	product_name varchar2(30) not null,
	product_price number(5) not null,
	product_detail varchar2(50),
	product_cate char(1),
	constraint product_p_no_pk Primary key(product_no),
	constraint product_p_cate_fk Foreign key(product_cate)
	references product_category(cate_no)
); 

alter table product
modify product_price check (product_price>=0);


insert all 
into product
values('001', '아메리카노', 2500, '', 'D')
into product
values('002', '아이스아메리카노', 2500, '', 'D')
into product
values('003', '라떼', 3000, '', 'D')
into product
values('004', '치즈케익', 4000, '', 'F')
select * from dual;

주문기본, 주문상세 테이블 모델링
정규화 : 한곳에 집약된 데이터가 중복되지 않게 테이블을 쪼개주는 것.
정규화 팁(다대다의 관계는 논리모델링에서는 가능하지만 물리모델링에서는 1대다 다대1로 해소를 시켜줘야한다.-툴을쓰면 알아서 해소됨.(ERwin?리저드?)
주문시간 팁(자료형 timstamp자세한 초단위까지 날짜를 얻을수있다.)
주문번호 주문자ID 주문자이름 주문시간 주문자주소 - 주문상품번호 상품명 상품가격 주문수량
1		+1		테1				구로구		001	아메리카노 2500 2
1		+1		테1				구로구		002	아.아 	2500 3
2		+2		테2				송파구		001	아메리카노 2500 5
2		+2		테2				송파구		003	라떼 		3000 1
2		+2		테2				송파구		003	라떼	 	3000 1
2		+2		테2				송파구		003	라떼 		3000 1

1.주문자ID, 패스워드, 이름은 customer테이블을 참조
2.주문상품번호 이름, 가격 등은 product테이블을 참조
3.주문번호와 주문상품번호는 PK 즉, 두 컬럼이 복합키로 구성되는 PK가 되야함.
4.그외의 주문자ID나 주문시간은 계속 중복값이 발생하기 때문에 테이블을 다시한번 쪼갬.
5.주문기본테이블(ORDER_INFO ) : 주문번호(order_no number) ID(order_id c.id) 주문시간(order_date date DEFAULT(sysdate)
 // 주문상세테이블(ORDER_LINE) : 주문번호(order_no number) 주문상품번호(order_product_no) 주문수량(orde_quantity number(2)

주문기본, 주문상세 테이블 생성
drop table ORDER_INFO;
create table ORDER_INFO(
	order_no number,
	order_id varchar2(16),
	order_date date DEFAULT sysdate,
	constraint order_info_no_pk Primary key(order_no),
	constraint order_info_id_fk Foreign key(order_id)
	references customer(ID));
	
drop table ORDER_LINE;
create table ORDER_LINE(
	order_no number,
	order_product_no varchar2(5),
	order_quantity number(2),
	constraint order_line_pk Primary key(order_no,order_product_no),
	constraint order_line_order_no_fk foreign key(order_no)
	references ORDER_INFO(order_no),
	constraint order_line_order_product_no_fk foreign key(order_product_no)
	references PRODUCT(product_no));
	
주문번호 시퀀스 생성
시퀀스에서 쿼런트벨류는 혼자 쓸수 없다.
그리고 같은 디비연결에서 넥스트벨류와 커런트벨류를 같이 해줘야한다.
즉, 넥스트벨류를하고 재연결 후 커런트벨류를 쓸 수 없다.

create sequence seq_ORDER_INFO_order_no;
시퀀스 조회
select * from user_sequences;

ex) 주문

insert into order_info(order_no, order_id)
values(seq_order_info_order_no.nextval, 'test');

insert into order_line(order_no, order_product_no, order_quantity)
values(seq_order_info_order_no.currval, '003', 1);
inserto into order_line(order_no, order_product_no, order_quantity)
values(seq_order_info_order_no.currval, '002', 2);


--해당ID 주문내역보기
주문번호 주문일자 상품번호 상품명 가격 주문수량
SELECT info.order_no, info.order_date, p.product_no, p.product_name, p.product_price, line.order_quantity
FROM order_info info JOIN order_line line
ON info.order_no = line.order_no
JOIN product p ON p.product_no = line.order_product_no
WHERE order_id = 'now0914'
ORDER BY order_no DESC, product_no;